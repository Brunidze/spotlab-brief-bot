
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging

API_TOKEN = '8149514714:AAEJWG3pJ-AMoEw7VmrAMV-ZOITC6A50u4o' 

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class BriefForm(StatesGroup):
    company = State()
    contact = State()
    project = State()
    goal = State()
    audience = State()
    services = State()
    budget = State()
    deadline = State()
    references = State()
    values = State()

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ú—ã ‚Äî SpotLab. –ó–∞–ø–æ–ª–Ω–∏ –º–∏–Ω–∏-–±—Ä–∏—Ñ, —ç—Ç–æ –∑–∞–π–º—ë—Ç 3‚Äì5 –º–∏–Ω—É—Ç. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è?")
    await BriefForm.company.set()

@dp.message_handler(state=BriefForm.company)
async def step_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await message.answer("–ö—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ? –ò–º—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è.")
    await BriefForm.next()

@dp.message_handler(state=BriefForm.contact)
async def step_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await message.answer("–ß—Ç–æ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º?")
    await BriefForm.next()

@dp.message_handler(state=BriefForm.project)
async def step_project(message: types.Message, state: FSMContext):
    await state.update_data(project=message.text)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", "–°—Ç—Ä–æ–∏—Ç—å –±—Ä–µ–Ω–¥")
    markup.add("–ü—Ä–∏–≤–ª–µ—á—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", "–õ–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥", "–î—Ä—É–≥–æ–µ")
    await message.answer("–ö–∞–∫–∞—è —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞?", reply_markup=markup)
    await BriefForm.next()

@dp.message_handler(state=BriefForm.goal)
async def step_goal(message: types.Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await message.answer("–ö—Ç–æ –≤–∞—à–∞ –¶–ê?", reply_markup=types.ReplyKeyboardRemove())
    await BriefForm.next()

@dp.message_handler(state=BriefForm.audience)
async def step_audience(message: types.Message, state: FSMContext):
    await state.update_data(audience=message.text)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ PR", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
    markup.add("SMM –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ", "–ò–Ω—Ñ–ª—é–µ–Ω—Å-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥")
    markup.add("–í–∏–¥–µ–æ–ø—Ä–æ–¥–∞–∫—à–Ω", "–ê–Ω–∏–º–∞—Ü–∏—è", "–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å")
    await message.answer("–ß—Ç–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –∏–∑ –Ω–∞—à–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π?", reply_markup=markup)
    await BriefForm.next()

@dp.message_handler(state=BriefForm.services)
async def step_services(message: types.Message, state: FSMContext):
    await state.update_data(services=message.text)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–æ 100 000 ‚ÇΩ", "100 000 ‚Äì 300 000 ‚ÇΩ", "300 000 ‚Äì 700 000 ‚ÇΩ", "700 000+ ‚ÇΩ", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å")
    await message.answer("–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç?", reply_markup=markup)
    await BriefForm.next()

@dp.message_handler(state=BriefForm.budget)
async def step_budget(message: types.Message, state: FSMContext):
    await state.update_data(budget=message.text)
    await message.answer("–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –∏ –¥–µ–¥–ª–∞–π–Ω?", reply_markup=types.ReplyKeyboardRemove())
    await BriefForm.next()

@dp.message_handler(state=BriefForm.deadline)
async def step_deadline(message: types.Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –∏–ª–∏ –ø—Ä–∏–º–µ—Ä—ã?")
    await BriefForm.next()

@dp.message_handler(state=BriefForm.references)
async def step_references(message: types.Message, state: FSMContext):
    await state.update_data(references=message.text)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–∫–æ—Ä–æ—Å—Ç—å", "–ö—Ä–µ–∞—Ç–∏–≤", "–ì–ª—É–±–æ–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
    markup.add("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å", "–¶–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ", "–î—Ä—É–≥–æ–µ (–Ω–∞–ø–∏—à—É —Å–∞–º)")
    await message.answer("–ß—Ç–æ –≤–∞–∂–Ω–æ –≤ —Ä–∞–±–æ—Ç–µ —Å –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º?", reply_markup=markup)
    await BriefForm.next()


@dp.message_handler(state=BriefForm.values)
async def step_values(message: types.Message, state: FSMContext):
    await state.update_data(values=message.text)
    data = await state.get_data()
    summary = "\n".join([f"{k.capitalize()}: {v}" for k, v in data.items()])

  
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–æ—Ç –∫—Ä–∞—Ç–∫–æ –æ —Ç–µ–±–µ:\n\n{summary}\n\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ò–ª–∏ –Ω–∞–ø–∏—à–∏: @SpotLabADV",
        reply_markup=types.ReplyKeyboardRemove()
    )

    
    CHAT_ID = -1002633703555
    await bot.send_message(CHAT_ID, f"üì• –ù–æ–≤—ã–π –±—Ä–∏—Ñ!\n\n{summary}")

    await state.finish()

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
